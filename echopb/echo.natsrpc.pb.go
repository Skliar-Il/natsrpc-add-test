// Code generated by protoc-gen-natsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-natsrpc v0.7.0
// source: echo.proto

package echopb

import (
	context "context"
	natsrpc "github.com/LeKovr/natsrpc"
	reflect "reflect"
)

var _ context.Context
var _ reflect.Value
var _ = natsrpc.SupportVersion_0_7_0

const (
	EchoService_NRServiceName = "echopb.EchoService"
)

type EchoServiceNRClient interface {
	Echo(ctx context.Context, req *EchoRequest, opt ...natsrpc.CallOption) (*EchoReply, error)
}

type _EchoServiceNRClientImpl struct {
	c natsrpc.ClientInterface
}

// NewEchoServiceNRClient
func NewEchoServiceNRClient(c natsrpc.ClientInterface) EchoServiceNRClient {
	ret := &_EchoServiceNRClientImpl{
		c: c,
	}
	return ret
}
func (c *_EchoServiceNRClientImpl) Echo(ctx context.Context, req *EchoRequest, opt ...natsrpc.CallOption) (*EchoReply, error) {
	rep := &EchoReply{}
	err := c.c.Request(ctx, EchoService_NRServiceName, "Echo", req, rep, opt...)
	if err != nil {
		return nil, err
	}
	return rep, err
}

var EchoService_NRServiceDesc = natsrpc.ServiceDesc{
	ServiceName: EchoService_NRServiceName,
	Methods: []natsrpc.MethodDesc{
		{
			MethodName:  "Echo",
			Handler:     _EchoService_Echo_NRHandler,
			RequestType: reflect.TypeOf(EchoRequest{}),
			IsPublish:   false,
		},
	},
	Metadata: "echo.proto",
}

type EchoServiceNRServer interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoReply, error)
}

func _EchoService_Echo_NRHandler(svc interface{}, ctx context.Context, req any) (any, error) {
	return svc.(EchoServiceNRServer).Echo(ctx, req.(*EchoRequest))
}

func RegisterEchoServiceNRServer(register natsrpc.ServiceRegistrar, s EchoServiceNRServer, opts ...natsrpc.ServiceOption) (natsrpc.ServiceInterface, error) {
	return register.Register(EchoService_NRServiceDesc, s, opts...)
}
